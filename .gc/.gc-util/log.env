#!/usr/bin/env bash

gitcid_log_init() {
	if [ -z ${GITCID_VERBOSE_OUTPUT+x} ]; then
		export GITCID_LOG_TIMESTAMP_CMD=${GITCID_LOG_TIMESTAMP_CMD:-"date -Iseconds"}
	else
		export GITCID_LOG_TIMESTAMP_CMD=${GITCID_LOG_TIMESTAMP_CMD:-"date -Ims"}
	fi

	source_file="${BASH_SOURCE[0]}"

	if [ $# -ge 2 ]; then
		source_file="${2}"
	fi

	current_log_file="${GITCID_LOG_DIR}$(echo "$source_file" | cut -d'/' -f2-).log"

	current_log_dir="$(dirname "${current_log_file}")/"
	if [ ! -d "$current_log_dir" ]; then
		mkdir -p "$current_log_dir"
	fi
}

gitcid_log_output_str() {
	gitcid_log_init $@

	log_tag=""
	bash_source=""
	lineno=""

	if [ $# -lt 4 ]; then
		gitcid_log_err "${BASH_SOURCE[0]}" $LINENO "Incorrect number of arguments \
passed to gitcid_log command. It requires 4 args, but you passed $#: $@"
		return 90
	fi

	start_pos=4
	bash_source="[${2}"
	lineno=":${3}] "
	file_str=""
	log_tag="${1} "

  if [ ! -z ${GITCID_VERBOSE_OUTPUT+x} ]; then
		file_str="${bash_source}${lineno}"
	fi

	output_str="${file_str}${log_tag}${@:$start_pos}"
}

gitcid_log() {
	gitcid_log_output_str $@
	res_gitcid_log_output_str=$?
	if [ $res_gitcid_log_output_str -ne 0 ]; then
		gitcid_log_err
	fi

	printf "%b\n" "$(${GITCID_LOG_TIMESTAMP_CMD}) ${output_str}" | \
		tee -a "${GITCID_LOG_DIR}gitcid.log" "${current_log_file}"
}

gitcid_log_echo() {
	in_args=("echo:" "$@")
	gitcid_log_init ${in_args[@]}

	printf "%b\n" "${@:3}" | \
		tee -a "${GITCID_LOG_DIR}gitcid.log" "${current_log_file}"
}

gitcid_log_echo_verbose() {
	if [ ! -z ${GITCID_VERBOSE_OUTPUT+x} ]; then
		in_args=("echo(verbose):" "$@")
		gitcid_log_init ${in_args[@]}

		printf "%b\n" "${@:3}" | \
			tee -a "${GITCID_LOG_DIR}gitcid.log" "${current_log_file}"
	fi
}

gitcid_log_info() {
	gitcid_log "info:" $@
}

gitcid_log_info_verbose() {
	if [ ! -z ${GITCID_VERBOSE_OUTPUT+x} ]; then
		gitcid_log "info(verbose):" $@
	fi
}

gitcid_log_notice() {
	gitcid_log "NOTICE:" $@
}

gitcid_log_notice_verbose() {
	if [ ! -z ${GITCID_VERBOSE_OUTPUT+x} ]; then
		gitcid_log "NOTICE(verbose):" $@
	fi
}

gitcid_log_update() {
	gitcid_log "UPDATE-NOTICE:" $@
}

gitcid_log_update_verbose() {
	if [ ! -z ${GITCID_VERBOSE_OUTPUT+x} ]; then
		gitcid_log "UPDATE-NOTICE(verbose):" $@
	fi
}

gitcid_log_background() {
	gitcid_log "background:" $@
}

gitcid_log_background_verbose() {
	if [ ! -z ${GITCID_VERBOSE_OUTPUT+x} ]; then
		gitcid_log "background(verbose):" $@
	fi
}

gitcid_log_warn() {
	gitcid_log "warning:" $@ 1>&2
}

gitcid_log_warn_verbose() {
	if [ ! -z ${GITCID_VERBOSE_OUTPUT+x} ]; then
		gitcid_log "warning(verbose):" $@ 1>&2
	fi
}

gitcid_log_err() {
	gitcid_log "error:" $@ 1>&2
}

gitcid_log_err_verbose() {
	if [ ! -z ${GITCID_VERBOSE_OUTPUT+x} ]; then
		gitcid_log "error(verbose):" $@ 1>&2
	fi
}

gitcid_log_import() {
	gitcid_log "import:" $@
}

gitcid_log_import_verbose() {
	if [ ! -z ${GITCID_VERBOSE_OUTPUT+x} ]; then
		gitcid_log "import(verbose):" $@
	fi
}

gitcid_util_log() {
	GITCID_LOG_DIR=${GITCID_LOG_DIR:-"${GITCID_DIR}.gc-logs/"}

	if [ ! -d "$GITCID_LOG_DIR" ]; then
		mkdir -p "$GITCID_LOG_DIR"
	fi

	gitcid_log_echo "${BASH_SOURCE[0]}" $LINENO "\n==========\n" >/dev/null
	gitcid_log_notice "${BASH_SOURCE[0]}" $LINENO "GitCid script invoked: $0 $@\n" >/dev/null

	gitcid_log_echo_verbose "${BASH_SOURCE[0]}" $LINENO "Early Logs"
	gitcid_log_echo_verbose "${BASH_SOURCE[0]}" $LINENO "----------"
	gitcid_log_info_verbose "${BASH_SOURCE[0]}" $LINENO "Activating verbose output because of the command line option: \"$reason\""

	gitcid_log_import_verbose "${BASH_SOURCE[0]}" $LINENO "GitCid log utils imported: ${BASH_SOURCE[0]}"
}

gitcid_util_log $@
