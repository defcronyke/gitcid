#!/usr/bin/env bash

gitcid_get_architecture() {
	uname -a | grep "x86_64" >/dev/null
	IS_X64=$?

	uname -a | grep "arm64" >/dev/null
	IS_ARM64=$?

	uname -a | grep "arm" >/dev/null
	IS_ARMHF=$?

	if [ $IS_X64 -eq 0 ]; then
		GITCID_YML_ARCH=""
	elif [ $IS_ARM64 -eq 0 ]; then
		GITCID_YML_ARCH="arm64v8/"
	elif [ $IS_ARMHF -eq 0 ]; then
		GITCID_YML_ARCH="arm32v7/"
	else
		GITCID_YML_ARCH=""
	fi

    printf '%b' "$GITCID_YML_ARCH"
}

gitcid_get_default_remote() {
    GITCID_PREFERRED_DEFAULT_REMOTE=${GITCID_PREFERRED_DEFAULT_REMOTE:-"origin"}
    GITCID_DEFAULT_REMOTES=${GITCID_DEFAULT_REMOTES:-"${GITCID_PREFERRED_DEFAULT_REMOTE}|upstream"}
    GITCID_DEFAULT_REMOTE_TYPE=${GITCID_DEFAULT_REMOTE_TYPE:-"fetch"}
    
    GITCID_REMOTES=${GITCID_REMOTES:-"$(git remote -v | xargs -0 | \
        grep -iE "^.*\s*\(${GITCID_DEFAULT_REMOTE_TYPE}\)$" | \
        grep -ioE '^\w*' | head -n 1)"}

    GITCID_DEFAULT_REMOTE="$(printf '%b' "${GITCID_REMOTES}" | grep -Po "^${GITCID_DEFAULT_REMOTES}$" | head -n 1 | tr -d '\n')"

    if [ -z "$GITCID_DEFAULT_REMOTE" ]; then
        GITCID_DEFAULT_REMOTE="$GITCID_PREFERRED_DEFAULT_REMOTE"
    fi

    printf '%b' "${GITCID_DEFAULT_REMOTE}"
}

gitcid_get_default_remote_path() {
    GITCID_DEFAULT_REMOTE=${GITCID_DEFAULT_REMOTE:-"$(gitcid_get_default_remote)"}
    GITCID_DEFAULT_REMOTES=${GITCID_DEFAULT_REMOTES:-"${GITCID_PREFERRED_DEFAULT_REMOTE}|upstream"}
    
    GITCID_DEFAULT_REMOTE_PATH="$(git remote -v | sed -E 's#\s\s*# #g' | xargs -0 | \
cut -d' ' -f2 | grep -P "${GITCID_DEFAULT_REMOTES}" | head -n 1)"

    if [ -z "$GITCID_DEFAULT_REMOTE_PATH" ]; then
        GITCID_DEFAULT_REMOTE_PATH="./"
    fi

    printf '%b' "$GITCID_DEFAULT_REMOTE_PATH"
}

gitcid_get_default_branch() {
    GITCID_PREFERRED_DEFAULT_BRANCH=${GITCID_PREFERRED_DEFAULT_BRANCH:-"master"}
    GITCID_DEFAULT_BRANCHES=${GITCID_DEFAULT_BRANCHES:-"master|main"}
    GITCID_DEFAULT_REMOTE=${GITCID_DEFAULT_REMOTE:-"$(gitcid_get_default_remote $@)"}
    GITCID_DEFAULT_REMOTE_PATH=${GITCID_DEFAULT_REMOTE_PATH:-"$(gitcid_get_default_remote_path "$@")"}

    GITCID_DEFAULT_BRANCH="$(git ls-remote --symref ${GITCID_DEFAULT_REMOTE_PATH} HEAD | sed -E 's#\s\s*# #g' | cut -d' ' -f2 | rev | cut -d'/' -f1 | rev | head -n 1)"
    
    if [ -z "$GITCID_DEFAULT_BRANCH" ]; then
        if [ $# -ge 1 ]; then
            GITCID_DEFAULT_BRANCHES="$1"
        fi

        GITCID_DEFAULT_BRANCH="$(git branch | cat | grep -Po "$GITCID_DEFAULT_BRANCHES" | \
            tail -n 1)" # Prefer master if both are present.

        if [ -z "$GITCID_DEFAULT_BRANCH" ]; then
            GITCID_DEFAULT_BRANCH="${GITCID_PREFERRED_DEFAULT_BRANCH}"
            GITCID_DEFAULT_BRANCHES="${GITCID_DEFAULT_BRANCH}"
        fi
    fi

    printf '%b' "$GITCID_DEFAULT_BRANCH"
}

gitcid_get_current_branch() {
    GITCID_CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"

    printf '%b' "$GITCID_CURRENT_BRANCH"
}

gitcid_util_git() {
    gitcid_log_notice "${BASH_SOURCE[0]}" $LINENO "GitCid script invoked: $0 $@\n" >/dev/null
    gitcid_log_import_verbose "${BASH_SOURCE[0]}" $LINENO "GitCid git utils imported: ${BASH_SOURCE[0]}"
}

gitcid_util_git "$@"
